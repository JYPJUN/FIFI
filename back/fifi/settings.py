"""
Django settings for fifi project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

# API 키 환경변수 설정
from pathlib import Path
import environ
import os

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)

# Set the project base directory
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) #기본설정

# BASE_DIR을 Path 객체로 정의
BASE_DIR = Path(__file__).resolve().parent.parent

# Take environment variables from .env file
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

PRODUCT_API_KEY = os.environ.get('PRODUCT_API_KEY')
EXCHANGE_API_KEY = os.environ.get('EXCHANGE_API_KEY')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-a=zbv+(#7h-@3bl86xj#r0c-4s6jen)4&aawye0_%76942p1+^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'accounts', # accounts app 추가
    'articles', # articles app 추가
    'exchange', # exchange app 추가
    'products', # products app 추가
    'rest_framework', # restframework 라이브러리 추가
    'rest_framework.authtoken', # restframework authtoken 추가
    'dj_rest_auth', # dj_rest_auth 라이브러리 추가
    'corsheaders', # corsheaders Token 사용 라이브러리 추가
    'django.contrib.sites',
    'allauth', # allauth 라이브러리 추가
    'allauth.account', # allauth 라이브러리 추가
    'allauth.socialaccount', # allauth 라이브러리 추가
    'dj_rest_auth.registration', # allauth 라이브러리 추가
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

SITE_ID = 1 # ????

# 토큰과 Permission으로 이용자 제한
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}

# allauth 커스텀 Register와 UserDetail 설정
REST_AUTH = {
    'REGISTER_SERIALIZER': 'accounts.serializers.CustomRegisterSerializer',
    'USER_DETAILS_SERIALIZER': 'accounts.serializers.CustomUserDetailsSerializer',
}

# allauth 어댑터를 커스텀해서 데이터 DB에 저장하기
ACCOUNT_ADAPTER = 'accounts.models.CustomAccountAdapter'
ACCOUNT_EMAIL_REQUIRED = False
ACCOUNT_EMAIL_VERIFICATION = None

# 허용 포트 설정
CORS_ORIGIN_WHITELIST = [
    'http://localhost:5173',
    'http://127.0.0.1:5173',
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware", # Token 인증 Middleware 추가
    "allauth.account.middleware.AccountMiddleware", # allauth Middleware 추가
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'fifi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'fifi.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# MYSQL DB 연동
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'jun', # DB Table Name
        'USER': 'root', # 사용자 ID
        'PASSWORD': 'tjddnjs12#', # 사용자 Password
        'HOST': '127.0.0.1', # MySQL 호스트
        'PORT': '3306',      # MySQL 포트 (기본값은 3306)
    }
}



# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ko-kr' # 한국 언어 설정

TIME_ZONE = 'Asia/Seoul' # 서울 시간 설정

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/


# 사용자가 올리는 이미지 파일들 저장 경로
MEDIA_ROOT = BASE_DIR / 'media'
MEDIA_URL = 'media/'

# 정적 이미지 저장 경로
STATIC_URL = 'static/'

# 유저 기본 설정 변경
AUTH_USER_MODEL = 'accounts.User'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
